(window["webpackJsonpDS"] = window["webpackJsonpDS"] || []).push([["vendors~universal-header"],{

/***/ "./node_modules/@umich-lib/link/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@umich-lib/link/lib/index.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _core = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n\nvar _styledBase = _interopRequireDefault(__webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\"));\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\"));\n\nvar _styles = __webpack_require__(/*! @umich-lib/styles */ \"./node_modules/@umich-lib/styles/lib/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nvar StyledLink = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('a', {\n  target: \"e2b8o640\",\n  label: \"StyledLink\"\n})(function (props) {\n  return _styles.LINK_STYLES[props.kind];\n},  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFPbUIiLCJmaWxlIjoiLi4vc3JjL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IHtcbiAgTElOS19TVFlMRVNcbn0gZnJvbSAnQHVtaWNoLWxpYi9zdHlsZXMnXG5cbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoJ2EnKShwcm9wcyA9PiBMSU5LX1NUWUxFU1twcm9wcy5raW5kXSlcblxuZnVuY3Rpb24gTGluayh7IGNoaWxkcmVuLCAuLi5vdGhlciB9KSB7XG4gIHJldHVybiAoXG4gICAgPFN0eWxlZExpbmsgey4uLm90aGVyfT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1N0eWxlZExpbms+XG4gIClcbn1cblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIGtpbmQ6IFByb3BUeXBlcy5vbmVPZihbXG4gICAgXCJkZWZhdWx0XCIsXG4gICAgXCJzdWJ0bGVcIixcbiAgICBcImxpc3RcIixcbiAgICBcImxpc3Qtc3Ryb25nXCIsXG4gICAgXCJzcGVjaWFsXCIsXG4gICAgXCJzcGVjaWFsLXN1YnRsZVwiXG4gIF0pLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUuaXNSZXF1aXJlZCxcbiAgYXM6IFByb3BUeXBlcy5ub2RlLFxufTtcblxuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIGtpbmQ6ICdkZWZhdWx0JyxcbiAgYXM6ICdhJ1xufTtcblxuXG5leHBvcnQgZGVmYXVsdCBMaW5rIl19 */\");\n\nfunction Link(_ref) {\n  var children = _ref.children,\n      other = _objectWithoutProperties(_ref, [\"children\"]);\n\n  return (0, _core.jsx)(StyledLink, other, children);\n}\n\nLink.propTypes = {\n  kind: _propTypes[\"default\"].oneOf([\"default\", \"subtle\", \"list\", \"list-strong\", \"special\", \"special-subtle\"]),\n  children: _propTypes[\"default\"].node.isRequired,\n  as: _propTypes[\"default\"].node\n};\nLink.defaultProps = {\n  kind: 'default',\n  as: 'a'\n};\nvar _default = Link;\nexports[\"default\"] = _default;\n\n//# sourceURL=webpack://DS/./node_modules/@umich-lib/link/lib/index.js?");

/***/ }),

/***/ "./node_modules/@umich-lib/loading/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@umich-lib/loading/lib/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _core = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n\nvar _styledBase = _interopRequireDefault(__webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\"));\n\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _propTypes = _interopRequireDefault(__webpack_require__(/*! prop-types */ \"./node_modules/prop-types/index.js\"));\n\nvar _styles = __webpack_require__(/*! @umich-lib/styles */ \"./node_modules/@umich-lib/styles/lib/index.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  from {\\n    transform: rotate(0deg);\\n  }\\n  to {\\n    transform: rotate(359deg);\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nvar rotation = (0, _core.keyframes)(_templateObject());\nvar Container = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('div', {\n  target: \"e1y863ul0\",\n  label: \"Container\"\n})(\"width:10rem;height:10rem;\", function (props) {\n  if (props.small) {\n    return {\n      width: '2rem',\n      height: '2rem',\n      'circle': {\n        strokeWidth: '12'\n      }\n    };\n  }\n}, {\n  animation: \"\".concat(rotation, \" .8s infinite linear\")\n},  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQmtCIiwiZmlsZSI6Ii4uL3NyYy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBrZXlmcmFtZXMgfSBmcm9tICdAZW1vdGlvbi9jb3JlJ1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnXG5pbXBvcnQge1xuICBDT0xPUlNcbn0gZnJvbSAnQHVtaWNoLWxpYi9zdHlsZXMnXG5cbmNvbnN0IHJvdGF0aW9uID0ga2V5ZnJhbWVzYFxuICBmcm9tIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcbiAgfVxuICB0byB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoMzU5ZGVnKTtcbiAgfVxuYFxuXG5jb25zdCBDb250YWluZXIgPSBzdHlsZWQoJ2RpdicpKFxuICB7XG4gICAgd2lkdGg6ICcxMHJlbScsXG4gICAgaGVpZ2h0OiAnMTByZW0nLFxuICB9LFxuICBwcm9wcyA9PiB7XG4gICAgaWYgKHByb3BzLnNtYWxsKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogJzJyZW0nLFxuICAgICAgICBoZWlnaHQ6ICcycmVtJyxcbiAgICAgICAgJ2NpcmNsZSc6IHtcbiAgICAgICAgICBzdHJva2VXaWR0aDogJzEyJ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LFxuICB7XG4gICAgYW5pbWF0aW9uOiBgJHtyb3RhdGlvbn0gLjhzIGluZmluaXRlIGxpbmVhcmBcbiAgfVxuKVxuXG5jb25zdCBTVkcgPSBzdHlsZWQoJ3N2ZycpKHtcbiAgZmlsbDogJ3RyYW5zcGFyZW50J1xufSlcblxuY29uc3QgQ2lyY2xlID0gc3R5bGVkKCdjaXJjbGUnKSh7XG4gIHN0cm9rZTogQ09MT1JTLnRlYWxbJzQwMCddLFxuICBzdHJva2VEYXNoYXJyYXk6ICcyNDAnLFxuICBzdHJva2VXaWR0aDogJzgnLFxuICBzdHJva2VEYXNob2Zmc2V0OiAnNDAnXG59KVxuXG5mdW5jdGlvbiBMb2FkaW5nKHByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPENvbnRhaW5lciB7Li4ucHJvcHN9PlxuICAgICAgPFNWRyB2aWV3Qm94PVwiLTc1IC03NSAxNTAgMTUwXCI+XG4gICAgICAgIDx0aXRsZT5Mb2FkaW5nPC90aXRsZT5cbiAgICAgICAgPENpcmNsZSBjeD1cIjBcIiBjeT1cIjBcIiByPVwiMzcuNVwiIC8+XG4gICAgICA8L1NWRz5cbiAgICA8L0NvbnRhaW5lcj5cbiAgKVxufVxuXG5Mb2FkaW5nLnByb3BUeXBlcyA9IHtcbiAgc21hbGw6IFByb3BUeXBlcy5ib29sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2FkaW5nIl19 */\");\nvar SVG = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('svg', {\n  target: \"e1y863ul1\",\n  label: \"SVG\"\n})( false ? undefined : {\n  name: \"1ntfbxl\",\n  styles: \"fill:transparent;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQ1kiLCJmaWxlIjoiLi4vc3JjL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7XG4gIENPTE9SU1xufSBmcm9tICdAdW1pY2gtbGliL3N0eWxlcydcblxuY29uc3Qgcm90YXRpb24gPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNTlkZWcpO1xuICB9XG5gXG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZGl2JykoXG4gIHtcbiAgICB3aWR0aDogJzEwcmVtJyxcbiAgICBoZWlnaHQ6ICcxMHJlbScsXG4gIH0sXG4gIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMuc21hbGwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiAnMnJlbScsXG4gICAgICAgIGhlaWdodDogJzJyZW0nLFxuICAgICAgICAnY2lyY2xlJzoge1xuICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMTInXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBhbmltYXRpb246IGAke3JvdGF0aW9ufSAuOHMgaW5maW5pdGUgbGluZWFyYFxuICB9XG4pXG5cbmNvbnN0IFNWRyA9IHN0eWxlZCgnc3ZnJykoe1xuICBmaWxsOiAndHJhbnNwYXJlbnQnXG59KVxuXG5jb25zdCBDaXJjbGUgPSBzdHlsZWQoJ2NpcmNsZScpKHtcbiAgc3Ryb2tlOiBDT0xPUlMudGVhbFsnNDAwJ10sXG4gIHN0cm9rZURhc2hhcnJheTogJzI0MCcsXG4gIHN0cm9rZVdpZHRoOiAnOCcsXG4gIHN0cm9rZURhc2hvZmZzZXQ6ICc0MCdcbn0pXG5cbmZ1bmN0aW9uIExvYWRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyIHsuLi5wcm9wc30+XG4gICAgICA8U1ZHIHZpZXdCb3g9XCItNzUgLTc1IDE1MCAxNTBcIj5cbiAgICAgICAgPHRpdGxlPkxvYWRpbmc8L3RpdGxlPlxuICAgICAgICA8Q2lyY2xlIGN4PVwiMFwiIGN5PVwiMFwiIHI9XCIzNy41XCIgLz5cbiAgICAgIDwvU1ZHPlxuICAgIDwvQ29udGFpbmVyPlxuICApXG59XG5cbkxvYWRpbmcucHJvcFR5cGVzID0ge1xuICBzbWFsbDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRpbmciXX0= */\"\n});\nvar Circle = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('circle', {\n  target: \"e1y863ul2\",\n  label: \"Circle\"\n})({\n  stroke: _styles.COLORS.teal['400'],\n  strokeDasharray: '240',\n  strokeWidth: '8',\n  strokeDashoffset: '40'\n},  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUEwQ2UiLCJmaWxlIjoiLi4vc3JjL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGtleWZyYW1lcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnXG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCdcbmltcG9ydCB7XG4gIENPTE9SU1xufSBmcm9tICdAdW1pY2gtbGliL3N0eWxlcydcblxuY29uc3Qgcm90YXRpb24gPSBrZXlmcmFtZXNgXG4gIGZyb20ge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xuICB9XG4gIHRvIHtcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNTlkZWcpO1xuICB9XG5gXG5cbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZCgnZGl2JykoXG4gIHtcbiAgICB3aWR0aDogJzEwcmVtJyxcbiAgICBoZWlnaHQ6ICcxMHJlbScsXG4gIH0sXG4gIHByb3BzID0+IHtcbiAgICBpZiAocHJvcHMuc21hbGwpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHdpZHRoOiAnMnJlbScsXG4gICAgICAgIGhlaWdodDogJzJyZW0nLFxuICAgICAgICAnY2lyY2xlJzoge1xuICAgICAgICAgIHN0cm9rZVdpZHRoOiAnMTInXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHtcbiAgICBhbmltYXRpb246IGAke3JvdGF0aW9ufSAuOHMgaW5maW5pdGUgbGluZWFyYFxuICB9XG4pXG5cbmNvbnN0IFNWRyA9IHN0eWxlZCgnc3ZnJykoe1xuICBmaWxsOiAndHJhbnNwYXJlbnQnXG59KVxuXG5jb25zdCBDaXJjbGUgPSBzdHlsZWQoJ2NpcmNsZScpKHtcbiAgc3Ryb2tlOiBDT0xPUlMudGVhbFsnNDAwJ10sXG4gIHN0cm9rZURhc2hhcnJheTogJzI0MCcsXG4gIHN0cm9rZVdpZHRoOiAnOCcsXG4gIHN0cm9rZURhc2hvZmZzZXQ6ICc0MCdcbn0pXG5cbmZ1bmN0aW9uIExvYWRpbmcocHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8Q29udGFpbmVyIHsuLi5wcm9wc30+XG4gICAgICA8U1ZHIHZpZXdCb3g9XCItNzUgLTc1IDE1MCAxNTBcIj5cbiAgICAgICAgPHRpdGxlPkxvYWRpbmc8L3RpdGxlPlxuICAgICAgICA8Q2lyY2xlIGN4PVwiMFwiIGN5PVwiMFwiIHI9XCIzNy41XCIgLz5cbiAgICAgIDwvU1ZHPlxuICAgIDwvQ29udGFpbmVyPlxuICApXG59XG5cbkxvYWRpbmcucHJvcFR5cGVzID0ge1xuICBzbWFsbDogUHJvcFR5cGVzLmJvb2xcbn07XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRpbmciXX0= */\");\n\nfunction Loading(props) {\n  return (0, _core.jsx)(Container, props, (0, _core.jsx)(SVG, {\n    viewBox: \"-75 -75 150 150\"\n  }, (0, _core.jsx)(\"title\", null, \"Loading\"), (0, _core.jsx)(Circle, {\n    cx: \"0\",\n    cy: \"0\",\n    r: \"37.5\"\n  })));\n}\n\nLoading.propTypes = {\n  small: _propTypes[\"default\"].bool\n};\nvar _default = Loading;\nexports[\"default\"] = _default;\n\n//# sourceURL=webpack://DS/./node_modules/@umich-lib/loading/lib/index.js?");

/***/ }),

/***/ "./node_modules/@umich-lib/universal-header/lib/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@umich-lib/universal-header/lib/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _core = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\n\nvar _styledBase = _interopRequireDefault(__webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\"));\n\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"./node_modules/react/index.js\"));\n\nvar _axios = _interopRequireDefault(__webpack_require__(/*! axios */ \"./node_modules/axios/index.js\"));\n\nvar _styles = __webpack_require__(/*! @umich-lib/styles */ \"./node_modules/@umich-lib/styles/lib/index.js\");\n\nvar _icon = _interopRequireDefault(__webpack_require__(/*! @umich-lib/icon */ \"./node_modules/@umich-lib/icon/lib/index.js\"));\n\nvar _loading = _interopRequireDefault(__webpack_require__(/*! @umich-lib/loading */ \"./node_modules/@umich-lib/loading/lib/index.js\"));\n\nvar _alert = _interopRequireDefault(__webpack_require__(/*! @umich-lib/alert */ \"./node_modules/@umich-lib/alert/lib/index.js\"));\n\nvar _link = _interopRequireDefault(__webpack_require__(/*! @umich-lib/link */ \"./node_modules/@umich-lib/link/lib/index.js\"));\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj[\"default\"] = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/*\n  Add background color and flex the title\n  and dropdown label to the start and end\n  with space-between.\n*/\nvar HeaderContainer = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('header', {\n  target: \"ep434io0\",\n  label: \"HeaderContainer\"\n})({\n  background: _styles.COLORS.blue[100]\n},  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nvar HeaderContent = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('div', {\n  target: \"ep434io1\",\n  label: \"HeaderContent\"\n})({\n  display: 'flex',\n  justifyContent: 'space-between',\n  padding: \"\".concat(_styles.SPACING['2XS'], \" 0\")\n},  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n/*\n  A root component to share the styling of\n  text used.\n*/\n\nvar HeaderText = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('span', {\n  target: \"ep434io2\",\n  label: \"HeaderText\"\n})(_objectSpread({}, _styles.TYPOGRAPHY['3XS'], {\n  color: _styles.COLORS.neutral[300]\n}),  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n/*\n  Same goals as the Link, but\n  semantically a button.\n*/\n\nvar SitesButton = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('button', {\n  target: \"ep434io3\",\n  label: \"SitesButton\"\n})(_objectSpread({}, _styles.LINK_STYLES['special-subtle'], {\n  ':hover': {\n    'span': _styles.LINK_STYLES['special-subtle'][':hover']\n  }\n}),  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n/*\n  Need a relative parent for the Overlay\n  to be positioned to.\n*/\n\nvar SitesContainer = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('div', {\n  target: \"ep434io4\",\n  label: \"SitesContainer\"\n})( false ? undefined : {\n  name: \"b3pn3b\",\n  styles: \"display:inline-block;position:relative;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\nvar Overlay = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('div', {\n  target: \"ep434io5\",\n  label: \"Overlay\"\n})(_defineProperty({\n  background: 'white',\n  zIndex: '10',\n  position: \"absolute\",\n  left: \"auto\",\n  right: \"0\",\n  width: \"862px\",\n  maxWidth: \"calc(100vw - \".concat(_styles.SPACING['XL'], \")\"),\n  border: \"solid 1px \".concat(_styles.COLORS.neutral[100]),\n  boxShadow: \"0 4px 8px 0 rgba(0, 0, 0, 0.1)\",\n  padding: _styles.SPACING['L'],\n  marginLeft: _styles.SPACING['XL'],\n  marginBottom: _styles.SPACING['L']\n}, _styles.MEDIA_QUERIES.LARGESCREEN, {\n  padding: _styles.SPACING['XL'],\n  maxWidth: \"calc(100vw - \".concat(_styles.SPACING['2XL'], \" * 2)\") // less the margins\n\n}),  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n/*\n  Apply appropriate typography styling\n  to the overlay lede line.\n*/\n\nvar SitesLede = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('p', {\n  target: \"ep434io6\",\n  label: \"SitesLede\"\n})(_objectSpread({}, _styles.TYPOGRAPHY['L'], {\n  marginBottom: _styles.SPACING['L']\n}),  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\n/*\n  Styling for link items\n*/\n\nvar LinksContainer = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('div', {\n  target: \"ep434io7\",\n  label: \"LinksContainer\"\n})(_defineProperty({\n  'ul:first-of-type': {\n    marginBottom: _styles.SPACING['M']\n  }\n}, _styles.MEDIA_QUERIES.LARGESCREEN, {\n  display: 'flex',\n  justifyContent: 'space-between',\n  'ul:last-of-type': {\n    minWidth: '16rem',\n    margin: '0',\n    marginLeft: _styles.SPACING['XL'],\n    paddingLeft: _styles.SPACING['XL'],\n    borderLeft: \"solid 1px \".concat(_styles.COLORS.neutral[100]),\n    'li': {\n      marginBottom: _styles.SPACING['S']\n    }\n  }\n}),  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE2RnVCIiwiZmlsZSI6Ii4uL3NyYy9pbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCdcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJ1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuaW1wb3J0IHtcbiAgQ09MT1JTLFxuICBUWVBPR1JBUEhZLFxuICBTUEFDSU5HLFxuICBNRURJQV9RVUVSSUVTLFxuICBNYXJnaW5zLFxuICBMYXJnZVNjcmVlbixcbiAgU21hbGxTY3JlZW4sXG4gIExJTktfU1RZTEVTXG59IGZyb20gJ0B1bWljaC1saWIvc3R5bGVzJ1xuaW1wb3J0IEljb24gZnJvbSAnQHVtaWNoLWxpYi9pY29uJ1xuaW1wb3J0IExvYWRpbmcgZnJvbSAnQHVtaWNoLWxpYi9sb2FkaW5nJ1xuaW1wb3J0IEFsZXJ0IGZyb20gJ0B1bWljaC1saWIvYWxlcnQnXG5pbXBvcnQgTGluayBmcm9tICdAdW1pY2gtbGliL2xpbmsnXG5cbi8qXG4gIEFkZCBiYWNrZ3JvdW5kIGNvbG9yIGFuZCBmbGV4IHRoZSB0aXRsZVxuICBhbmQgZHJvcGRvd24gbGFiZWwgdG8gdGhlIHN0YXJ0IGFuZCBlbmRcbiAgd2l0aCBzcGFjZS1iZXR3ZWVuLlxuKi9cbmNvbnN0IEhlYWRlckNvbnRhaW5lciA9IHN0eWxlZCgnaGVhZGVyJykoe1xuICBiYWNrZ3JvdW5kOiBDT0xPUlMuYmx1ZVsxMDBdXG59KVxuXG5jb25zdCBIZWFkZXJDb250ZW50ID0gc3R5bGVkKCdkaXYnKSh7XG4gIGRpc3BsYXk6ICdmbGV4JyxcbiAganVzdGlmeUNvbnRlbnQ6ICdzcGFjZS1iZXR3ZWVuJyxcbiAgcGFkZGluZzogYCR7U1BBQ0lOR1snMlhTJ119IDBgXG59KVxuXG4vKlxuICBBIHJvb3QgY29tcG9uZW50IHRvIHNoYXJlIHRoZSBzdHlsaW5nIG9mXG4gIHRleHQgdXNlZC5cbiovXG5jb25zdCBIZWFkZXJUZXh0ID0gc3R5bGVkKCdzcGFuJykoe1xuICAuLi5UWVBPR1JBUEhZWyczWFMnXSxcbiAgY29sb3I6IENPTE9SUy5uZXV0cmFsWzMwMF1cbn0pXG5cbi8qXG4gIFNhbWUgZ29hbHMgYXMgdGhlIExpbmssIGJ1dFxuICBzZW1hbnRpY2FsbHkgYSBidXR0b24uXG4qL1xuY29uc3QgU2l0ZXNCdXR0b24gPSBzdHlsZWQoJ2J1dHRvbicpKHtcbiAgLi4uTElOS19TVFlMRVNbJ3NwZWNpYWwtc3VidGxlJ10sXG4gICc6aG92ZXInOiB7XG4gICAgJ3NwYW4nOiBMSU5LX1NUWUxFU1snc3BlY2lhbC1zdWJ0bGUnXVsnOmhvdmVyJ11cbiAgfVxufSlcblxuLypcbiAgTmVlZCBhIHJlbGF0aXZlIHBhcmVudCBmb3IgdGhlIE92ZXJsYXlcbiAgdG8gYmUgcG9zaXRpb25lZCB0by5cbiovXG5jb25zdCBTaXRlc0NvbnRhaW5lciA9IHN0eWxlZCgnZGl2Jykoe1xuICBkaXNwbGF5OiAnaW5saW5lLWJsb2NrJyxcbiAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbn0pXG5cbmNvbnN0IE92ZXJsYXkgPSBzdHlsZWQoJ2RpdicpKHtcbiAgYmFja2dyb3VuZDogJ3doaXRlJyxcbiAgekluZGV4OiAnMTAnLFxuICBwb3NpdGlvbjogYGFic29sdXRlYCxcbiAgbGVmdDogYGF1dG9gLFxuICByaWdodDogYDBgLFxuICB3aWR0aDogYDg2MnB4YCxcbiAgbWF4V2lkdGg6IGBjYWxjKDEwMHZ3IC0gJHtTUEFDSU5HWydYTCddfSlgLFxuICBib3JkZXI6IGBzb2xpZCAxcHggJHtDT0xPUlMubmV1dHJhbFsxMDBdfWAsXG4gIGJveFNoYWRvdzogYDAgNHB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4xKWAsXG4gIHBhZGRpbmc6IFNQQUNJTkdbJ0wnXSxcbiAgbWFyZ2luTGVmdDogU1BBQ0lOR1snWEwnXSxcbiAgbWFyZ2luQm90dG9tOiBTUEFDSU5HWydMJ10sXG4gIFtNRURJQV9RVUVSSUVTLkxBUkdFU0NSRUVOXToge1xuICAgIHBhZGRpbmc6IFNQQUNJTkdbJ1hMJ10sXG4gICAgbWF4V2lkdGg6IGBjYWxjKDEwMHZ3IC0gJHtTUEFDSU5HWycyWEwnXX0gKiAyKWAgLy8gbGVzcyB0aGUgbWFyZ2luc1xuICB9XG59KVxuXG4vKlxuICBBcHBseSBhcHByb3ByaWF0ZSB0eXBvZ3JhcGh5IHN0eWxpbmdcbiAgdG8gdGhlIG92ZXJsYXkgbGVkZSBsaW5lLlxuKi9cbmNvbnN0IFNpdGVzTGVkZSA9IHN0eWxlZCgncCcpKHtcbiAgLi4uVFlQT0dSQVBIWVsnTCddLFxuICBtYXJnaW5Cb3R0b206IFNQQUNJTkdbJ0wnXVxufSlcblxuLypcbiAgU3R5bGluZyBmb3IgbGluayBpdGVtc1xuKi9cbmNvbnN0IExpbmtzQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSh7XG4gICd1bDpmaXJzdC1vZi10eXBlJzoge1xuICAgIG1hcmdpbkJvdHRvbTogU1BBQ0lOR1snTSddXG4gIH0sXG4gIFtNRURJQV9RVUVSSUVTLkxBUkdFU0NSRUVOXToge1xuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ3NwYWNlLWJldHdlZW4nLFxuICAgICd1bDpsYXN0LW9mLXR5cGUnOiB7XG4gICAgICBtaW5XaWR0aDogJzE2cmVtJyxcbiAgICAgIG1hcmdpbjogJzAnLFxuICAgICAgbWFyZ2luTGVmdDogU1BBQ0lOR1snWEwnXSxcbiAgICAgIHBhZGRpbmdMZWZ0OiBTUEFDSU5HWydYTCddLFxuICAgICAgYm9yZGVyTGVmdDogYHNvbGlkIDFweCAke0NPTE9SUy5uZXV0cmFsWzEwMF19YCxcbiAgICAgICdsaSc6IHtcbiAgICAgICAgbWFyZ2luQm90dG9tOiBTUEFDSU5HWydTJ11cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG5cbmNvbnN0IExpbmtJdGVtID0gc3R5bGVkKCdsaScpKHtcbiAgcG9zaXRpb246ICdyZWxhdGl2ZScsXG4gIG1heFdpZHRoOiAnMzJyZW0nLFxuICAnOm5vdCg6bGFzdC1jaGlsZCknOiB7XG4gICAgbWFyZ2luQm90dG9tOiAnMXJlbSdcbiAgfVxufSlcblxuY29uc3QgTGlua0Rlc2NyaXB0aW9uID0gc3R5bGVkKCdwJykoe1xuICBjb2xvcjogQ09MT1JTLm5ldXRyYWxbJzMwMCddXG59KVxuXG5jb25zdCBMb2FkaW5nQ29udGFpbmVyID0gc3R5bGVkKCdkaXYnKSh7XG4gIGhlaWdodDogJzM4MHB4JyxcbiAgZGlzcGxheTogJ2ZsZXgnLFxuICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gIGFsaWduSXRlbXM6ICdjZW50ZXInXG59KVxuXG4vKlxuICBSZXNoYXBlIHRoZSBkYXRhIGZyb20gRHJ1cGFsXG4gIHNvIHRoYXQgaXQgY2FuIGJldHRlciBzdWl0ZWQgZm9yXG4gIHJlbmRlcmluZy5cbiovXG5mdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGRhdGEpIHtcbiAgcmV0dXJuIHtcbiAgICBwcmltYXJ5OiBkYXRhLmZpbHRlcihpdGVtID0+IGl0ZW0ubGV2ZWwgPT09IFwiMVwiKSxcbiAgICBzZWNvbmRhcnk6IGRhdGEuZmlsdGVyKGl0ZW0gPT4gaXRlbS5sZXZlbCA9PT0gXCIyXCIpXG4gIH07XG59XG5cbi8qXG4gIEhhbmRsZSByZW5kZXJpbmcgb2YgdGhlIExpbmtzXG4gIGFuZCBkZXNjcmlwdGlvbnMuXG4qL1xuZnVuY3Rpb24gU2l0ZUxpbmtzKHsgZGF0YSB9KSB7XG4gIHJldHVybiAoXG4gICAgPHVsPlxuICAgICAge2RhdGEubWFwKChkLCBpKSA9PiAoXG4gICAgICAgIDxMaW5rSXRlbSBrZXk9e2kgKyBkLnRpdGxlfT5cbiAgICAgICAgICA8TGluayBraW5kPVwibGlzdC1zdHJvbmdcIiBocmVmPXtkLmxpbmt9PlxuICAgICAgICAgICAge2QudGl0bGV9XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgIHtkLmRlc2NyaXB0aW9uICYmIChcbiAgICAgICAgICAgIDxMaW5rRGVzY3JpcHRpb24+XG4gICAgICAgICAgICAgIHtkLmRlc2NyaXB0aW9ufVxuICAgICAgICAgICAgPC9MaW5rRGVzY3JpcHRpb24+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9MaW5rSXRlbT5cbiAgICAgICkpfVxuICAgIDwvdWw+XG4gIClcbn1cblxuZnVuY3Rpb24gU2l0ZXMoKSB7XG4gIGNvbnN0IG5vZGUgPSB1c2VSZWYoKTtcbiAgY29uc3QgW29wZW4sIHNldE9wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbZGF0YSwgc2V0RGF0YV0gPSB1c2VTdGF0ZShudWxsKTtcbiAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShmYWxzZSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2sgPSBlID0+IHtcbiAgICBpZiAobm9kZS5jdXJyZW50LmNvbnRhaW5zKGUudGFyZ2V0KSkge1xuICAgICAgLy8gaW5zaWRlIGNsaWNrXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gb3V0c2lkZSBjbGlja1xuICAgIHNldE9wZW4oZmFsc2UpO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUtleWRvd24gPSBlID0+IHtcbiAgICBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgLy8gRVNDIGtleVxuICAgICAgc2V0T3BlbihmYWxzZSk7XG4gICAgfVxuICB9O1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gTWFrZSBzdXJlIHRvIG9ubHkgcnVuIHRoaXMgb25jZS5cbiAgICBpZiAoIWRhdGEpIHtcbiAgICAgIGF4aW9zLmdldChcImh0dHBzOi8vY21zLmRldi5saWIudW1pY2guZWR1L2FwaS91bml2ZXJzYWxoZWFkZXJcIilcbiAgICAgICAgLnRoZW4ocmVzdWx0ID0+IHNldERhdGEodHJhbnNmb3JtRGF0YShyZXN1bHQuZGF0YSkpKVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gc2V0RXJyb3IodHJ1ZSkpXG4gICAgfVxuICB9LCBbXSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZUNsaWNrKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlkb3duKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGhhbmRsZUNsaWNrKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleWRvd24pO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICByZXR1cm4gKFxuICAgIDxTaXRlc0NvbnRhaW5lciByZWY9e25vZGV9PlxuICAgICAgPFNpdGVzQnV0dG9uXG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldE9wZW4oIW9wZW4pfVxuICAgICAgICBhcmlhLWV4cGFuZGVkPXtvcGVufVxuICAgICAgPjxIZWFkZXJUZXh0PkV4cGxvcmU8L0hlYWRlclRleHQ+IDxJY29uIGljb249XCJleHBhbmRfbW9yZVwiIC8+PC9TaXRlc0J1dHRvbj5cbiAgICAgIFxuICAgICAge29wZW4gJiYgKFxuICAgICAgICA8T3ZlcmxheT5cbiAgICAgICAgICA8U2l0ZXNMZWRlIGFyaWEtcm9sZT1cImhlYWRpbmdcIj5FeHBsb3JlIHdoYXQgdGhlIGxpYnJhcnkgaGFzIHRvIG9mZmVyLjwvU2l0ZXNMZWRlPlxuICAgICAgICAgIHtlcnJvciA/IChcbiAgICAgICAgICAgIDxBbGVydCBpbnRlbnQ9XCJ3YXJuaW5nXCI+XG4gICAgICAgICAgICAgIDxwIHN0eWxlPXt7IG1heFdpZHRoOiAnMzZyZW0nIH19PjxzdHJvbmcgc3R5bGU9e3sgZm9udFdlaWdodDogJzgwMCcgfX0+RXJyb3I8L3N0cm9uZz46IFdlIGFyZSB0ZW1wb3JhcmlseSBoYXZpbmcgdHJvdWJsZSBsb2FkaW5nIG91ciBsaXN0IG9mIGxpYnJhcnkgc2l0ZXMuIFBsZWFzZSB0cnkgcmVmcmVzaGluZyB5b3VyIHBhZ2UuIFlvdSBjYW4gYWxzbyBjb250YWN0IDxMaW5rIGhyZWY9XCJodHRwczovL3d3dy5saWIudW1pY2guZWR1L2Fza1wiIGtpbmQ9XCJzdWJ0bGVcIj5Bc2sgYSBMaWJyYXJpYW48L0xpbms+IGZvciBoZWxwLjwvcD5cbiAgICAgICAgICAgIDwvQWxlcnQ+XG4gICAgICAgICAgKSA6IChcbiAgICAgICAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgICAgICAge2RhdGEgPyAoXG4gICAgICAgICAgICAgICAgPExpbmtzQ29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgPFNpdGVMaW5rcyBkYXRhPXtkYXRhLnByaW1hcnl9IC8+XG4gICAgICAgICAgICAgICAgICA8U2l0ZUxpbmtzIGRhdGE9e2RhdGEuc2Vjb25kYXJ5fSAvPlxuICAgICAgICAgICAgICAgIDwvTGlua3NDb250YWluZXI+XG4gICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPExvYWRpbmdDb250YWluZXI+XG4gICAgICAgICAgICAgICAgICA8TG9hZGluZyAvPlxuICAgICAgICAgICAgICAgIDwvTG9hZGluZ0NvbnRhaW5lcj5cbiAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgICAgKX1cbiAgICAgICAgICBcbiAgICAgICAgPC9PdmVybGF5PlxuICAgICAgKX1cbiAgICA8L1NpdGVzQ29udGFpbmVyPlxuICApXG59XG5cbmZ1bmN0aW9uIFVuaXZlcnNhbEhlYWRlcigpIHtcbiAgcmV0dXJuIChcbiAgICA8SGVhZGVyQ29udGFpbmVyXG4gICAgICBhcmlhLWxhYmVsPVwiVmlldyBvdXIgb3RoZXIgVS1NIExpYnJhcnkgc2l0ZXNcIlxuICAgID5cbiAgICAgIDxNYXJnaW5zPlxuICAgICAgICA8SGVhZGVyQ29udGVudD5cbiAgICAgICAgICA8TGFyZ2VTY3JlZW4+XG4gICAgICAgICAgICA8TGluayBocmVmPVwiaHR0cHM6Ly93d3cubGliLnVtaWNoLmVkdS9cIiBraW5kPVwic3BlY2lhbC1zdWJ0bGVcIj5cbiAgICAgICAgICAgICAgVW5pdmVyc2l0eSBvZiBNaWNoaWdhbiBsaWJyYXJ5XG4gICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgPC9MYXJnZVNjcmVlbj5cbiAgICAgICAgICA8U21hbGxTY3JlZW4+XG4gICAgICAgICAgICA8TGluayBocmVmPVwiaHR0cHM6Ly93d3cubGliLnVtaWNoLmVkdS9cIiBraW5kPVwic3BlY2lhbC1zdWJ0bGVcIj5cbiAgICAgICAgICAgICAgPGFiYnIgdGl0bGU9XCJVbml2ZXJzaXR5IG9mIE1pY2hpZ2FuXCI+VS1NPC9hYmJyPiBMaWJyYXJ5XG4gICAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgPC9TbWFsbFNjcmVlbj5cbiAgICAgICAgICA8U2l0ZXMgLz5cbiAgICAgICAgPC9IZWFkZXJDb250ZW50PlxuICAgICAgPC9NYXJnaW5zPlxuICAgIDwvSGVhZGVyQ29udGFpbmVyPlxuICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFVuaXZlcnNhbEhlYWRlciJdfQ== */\");\nvar LinkItem = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('li', {\n  target: \"ep434io8\",\n  label: \"LinkItem\"\n})( false ? undefined : {\n  name: \"dwkyy8\",\n  styles: \"position:relative;max-width:32rem;:not(:last-child){margin-bottom:1rem;}\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\nvar LinkDescription = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('p', {\n  target: \"ep434io9\",\n  label: \"LinkDescription\"\n})({\n  color: _styles.COLORS.neutral['300']\n},  false ? undefined : \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");\nvar LoadingContainer = (\n/*#__PURE__*/\n0, _styledBase[\"default\"])('div', {\n  target: \"ep434io10\",\n  label: \"LoadingContainer\"\n})( false ? undefined : {\n  name: \"1may7rj\",\n  styles: \"height:380px;display:flex;justify-content:center;align-items:center;\",\n  map: \"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\"\n});\n/*\n  Reshape the data from Drupal\n  so that it can better suited for\n  rendering.\n*/\n\nfunction transformData(data) {\n  return {\n    primary: data.filter(function (item) {\n      return item.level === \"1\";\n    }),\n    secondary: data.filter(function (item) {\n      return item.level === \"2\";\n    })\n  };\n}\n/*\n  Handle rendering of the Links\n  and descriptions.\n*/\n\n\nfunction SiteLinks(_ref) {\n  var data = _ref.data;\n  return (0, _core.jsx)(\"ul\", null, data.map(function (d, i) {\n    return (0, _core.jsx)(LinkItem, {\n      key: i + d.title\n    }, (0, _core.jsx)(_link[\"default\"], {\n      kind: \"list-strong\",\n      href: d.link\n    }, d.title), d.description && (0, _core.jsx)(LinkDescription, null, d.description));\n  }));\n}\n\nfunction Sites() {\n  var node = (0, _react.useRef)();\n\n  var _useState = (0, _react.useState)(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      data = _useState4[0],\n      setData = _useState4[1];\n\n  var _useState5 = (0, _react.useState)(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var handleClick = function handleClick(e) {\n    if (node.current.contains(e.target)) {\n      // inside click\n      return;\n    } // outside click\n\n\n    setOpen(false);\n  };\n\n  var handleKeydown = function handleKeydown(e) {\n    if (e.keyCode === 27) {\n      // ESC key\n      setOpen(false);\n    }\n  };\n\n  (0, _react.useEffect)(function () {\n    // Make sure to only run this once.\n    if (!data) {\n      _axios[\"default\"].get(\"https://cms.dev.lib.umich.edu/api/universalheader\").then(function (result) {\n        return setData(transformData(result.data));\n      })[\"catch\"](function (error) {\n        return setError(true);\n      });\n    }\n  }, []);\n  (0, _react.useEffect)(function () {\n    document.addEventListener(\"mousedown\", handleClick);\n    document.addEventListener(\"keydown\", handleKeydown);\n    return function () {\n      document.removeEventListener(\"mousedown\", handleClick);\n      document.addEventListener(\"keydown\", handleKeydown);\n    };\n  }, []);\n  return (0, _core.jsx)(SitesContainer, {\n    ref: node\n  }, (0, _core.jsx)(SitesButton, {\n    onClick: function onClick() {\n      return setOpen(!open);\n    },\n    \"aria-expanded\": open\n  }, (0, _core.jsx)(HeaderText, null, \"Explore\"), \" \", (0, _core.jsx)(_icon[\"default\"], {\n    icon: \"expand_more\"\n  })), open && (0, _core.jsx)(Overlay, null, (0, _core.jsx)(SitesLede, {\n    \"aria-role\": \"heading\"\n  }, \"Explore what the library has to offer.\"), error ? (0, _core.jsx)(_alert[\"default\"], {\n    intent: \"warning\"\n  }, (0, _core.jsx)(\"p\", {\n    style: {\n      maxWidth: '36rem'\n    }\n  }, (0, _core.jsx)(\"strong\", {\n    style: {\n      fontWeight: '800'\n    }\n  }, \"Error\"), \": We are temporarily having trouble loading our list of library sites. Please try refreshing your page. You can also contact \", (0, _core.jsx)(_link[\"default\"], {\n    href: \"https://www.lib.umich.edu/ask\",\n    kind: \"subtle\"\n  }, \"Ask a Librarian\"), \" for help.\")) : (0, _core.jsx)(_react[\"default\"].Fragment, null, data ? (0, _core.jsx)(LinksContainer, null, (0, _core.jsx)(SiteLinks, {\n    data: data.primary\n  }), (0, _core.jsx)(SiteLinks, {\n    data: data.secondary\n  })) : (0, _core.jsx)(LoadingContainer, null, (0, _core.jsx)(_loading[\"default\"], null)))));\n}\n\nfunction UniversalHeader() {\n  return (0, _core.jsx)(HeaderContainer, {\n    \"aria-label\": \"View our other U-M Library sites\"\n  }, (0, _core.jsx)(_styles.Margins, null, (0, _core.jsx)(HeaderContent, null, (0, _core.jsx)(_styles.LargeScreen, null, (0, _core.jsx)(_link[\"default\"], {\n    href: \"https://www.lib.umich.edu/\",\n    kind: \"special-subtle\"\n  }, \"University of Michigan library\")), (0, _core.jsx)(_styles.SmallScreen, null, (0, _core.jsx)(_link[\"default\"], {\n    href: \"https://www.lib.umich.edu/\",\n    kind: \"special-subtle\"\n  }, (0, _core.jsx)(\"abbr\", {\n    title: \"University of Michigan\"\n  }, \"U-M\"), \" Library\")), (0, _core.jsx)(Sites, null))));\n}\n\nvar _default = UniversalHeader;\nexports[\"default\"] = _default;\n\n//# sourceURL=webpack://DS/./node_modules/@umich-lib/universal-header/lib/index.js?");

/***/ })

}]);